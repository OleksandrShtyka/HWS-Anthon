from future import annotations
from dataclasses import dataclass

@dataclass
class Person:
    name: str
    def post_init(self) -> None:
        if not isinstance(self.name, str): raise TypeError("–Ü–º'—è –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º.")
        self.name = self.name.strip()
        if not self.name: raise ValueError("–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")

class BlackBox:
    @staticmethod
    def msg(): print("–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")
    @staticmethod
    def bye(): print("–ì–æ—Ç–æ–≤–æ.")

class Report:
    def init(self, person: Person | None = None) -> None:
        try: self._person = person or Person("–ì—ñ—Å—Ç—å")
        except (TypeError, ValueError): print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é '–ì—ñ—Å—Ç—å'"); self._person = Person("–ì—ñ—Å—Ç—å")

    def process(self, data: list[int], divisors: list[int]) -> None:
        try: print(f"Process for {self._person.name}")
        except AttributeError: print("‚ö†Ô∏è –ü–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å, '–ì—ñ—Å—Ç—å'"); self._person = Person("–ì—ñ—Å—Ç—å")
        BlackBox.msg()
        for i in range(len(data)):
            try: a = data[i]
            except IndexError: print("‚ö†Ô∏è –í–∏—Ö—ñ–¥ –∑–∞ –º–µ–∂—ñ data"); continue
            for j in range(len(divisors)):
                try:
                    b = divisors[j]
                    print(f"{a} / {b} = {a / b}")
                except ZeroDivisionError: print("‚ùå –î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å"); continue
                except TypeError:        print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø");  continue
            try: _ = data[i]
            except IndexError: print("‚ö†Ô∏è –Ü–Ω–¥–µ–∫—Å –ø–æ–º–∏–ª–∫–æ–≤–∏–π"); continue
        BlackBox.bye()

def main() -> None:
    data = [10, 20, 10, 20, 50]
    divisors = [10, 20, 0, 10, 50, 300]
    try:
        Report(Person("–ê–Ω—Ç–æ–Ω")).process(data, divisors)
    except KeyboardInterrupt: print("\n‚èπÔ∏è –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as ex:   print(f"üöß –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex}")

if __name__ == "__main__":
    main()