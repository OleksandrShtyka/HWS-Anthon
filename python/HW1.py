from __future__ import annotations
from dataclasses import dataclass
from typing import Iterable


@dataclass
class Person:
    name: str

    def __post_init__(self) -> None:
        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ: –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä—è–¥–∫–æ–º —ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –ø—ñ—Å–ª—è strip
        if not isinstance(self.name, str):
            raise TypeError("–Ü–º'—è –º–∞—î –±—É—Ç–∏ —Ä—è–¥–∫–æ–º.")
        self.name = self.name.strip()
        if not self.name:
            raise ValueError("–Ü–º'—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º.")


class BlackBox:
    @staticmethod
    def msg() -> None:
        print("–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")

    @staticmethod
    def bye() -> None:
        print("–ì–æ—Ç–æ–≤–æ.")


class Report:
    def __init__(self, person: Person | str | None = None) -> None:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Report –∑ –æ–±'—î–∫—Ç–æ–º Person –∞–±–æ —ñ–º'—è–º.
        if person is None:
            self._person = Person("–ì—ñ—Å—Ç—å")
            return

        if isinstance(person, Person):
            self._person = person
            return

        # –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ä—è–¥–æ–∫, —Å–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ Person ‚Äî –æ–±—Ä–æ–±–ª—è—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ
        try:
            self._person = Person(person)  # –º–æ–∂–µ –∫–∏–Ω—É—Ç–∏ TypeError –∞–±–æ ValueError
        except TypeError:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø –¥–ª—è —ñ–º–µ–Ω—ñ; –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é '–ì—ñ—Å—Ç—å'")
            self._person = Person("–ì—ñ—Å—Ç—å")
        except ValueError:
            print("‚ö†Ô∏è –ü–æ—Ä–æ–∂–Ω—î —ñ–º'—è; –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é '–ì—ñ—Å—Ç—å'")
            self._person = Person("–ì—ñ—Å—Ç—å")

    def process(self, data: Iterable, divisors: Iterable) -> None:
        # –ü—Ä–æ—Å—Ç–µ –≤–∞–ª—ñ–¥—É–≤–∞–Ω–Ω—è, —â–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —ñ—Ç–µ—Ä–æ–≤–∞–Ω—ñ –∫–æ–ª–µ–∫—Ü—ñ—ó (–Ω–µ —Ä—è–¥–∫–∏)
        try:
            if isinstance(data, (str, bytes)) or not hasattr(data, "__iter__"):
                raise TypeError("data –º–∞—î –±—É—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—î—é —á–∏—Å–µ–ª (–Ω–µ —Ä—è–¥–æ–∫).")
            if isinstance(divisors, (str, bytes)) or not hasattr(divisors, "__iter__"):
                raise TypeError("divisors –º–∞—î –±—É—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—î—é —á–∏—Å–µ–ª (–Ω–µ —Ä—è–¥–æ–∫).")
        except TypeError as ex:
            print(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {ex}")
            return

        try:
            print(f"Process for {self._person.name}")
        except AttributeError:
            # –Ø–∫—â–æ _person –Ω–µ —ñ—Å–Ω—É—î ‚Äî –≤—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            print("‚ö†Ô∏è –ü–æ—à–∫–æ–¥–∂–µ–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å; –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é '–ì—ñ—Å—Ç—å'")
            self._person = Person("–ì—ñ—Å—Ç—å")
            print(f"Process for {self._person.name}")

        BlackBox.msg()

        for a in data:
            # –û–∫—Ä–µ–º–æ –ª–æ–≤–∏–º–æ –ø–æ–º–∏–ª–∫–∏ —Ç–∏–ø—É –¥–ª—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ data
            try:
                if not isinstance(a, (int, float)):
                    raise TypeError(f"–ï–ª–µ–º–µ–Ω—Ç data –Ω–µ —î —á–∏—Å–ª–æ–º: {a!r}")
            except TypeError as ex:
                print(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç —É data: {ex} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue

            for b in divisors:
                try:
                    if not isinstance(b, (int, float)):
                        raise TypeError(f"–ï–ª–µ–º–µ–Ω—Ç divisors –Ω–µ —î —á–∏—Å–ª–æ–º: {b!r}")
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω—É–ª—å –æ–∫—Ä–µ–º–∏–º –±–ª–æ–∫–æ–º
                    if b == 0:
                        raise ZeroDivisionError("–î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å")
                    result = a / b
                except ZeroDivisionError:
                    print(f"‚ùå –î—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å: {a} / {b} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    continue
                except TypeError as ex:
                    print(f"‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø —É divisors: {ex} ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    continue
                else:
                    print(f"{a} / {b} = {result}")

        BlackBox.bye()


def main() -> None:
    data = [10, 20, 10, 20, 50]
    divisors = [10, 20, 0, 10, 50, 300]

    try:
        report = Report(Person("–ê–Ω—Ç–æ–Ω"))
        report.process(data, divisors)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except TypeError as ex:
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è TypeError
        print(f"üö´ TypeError: {ex}")
    except ValueError as ex:
        # –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è ValueError
        print(f"üö´ ValueError: {ex}")
    except Exception as ex:
        # –ó–∞–≥–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ ‚Äî –æ—Å—Ç–∞–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è
        print(f"üöß –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {ex}")


if __name__ == "__main__":
    main()
    
    def run_gui():
        try:
            import tkinter as tk
            from tkinter import messagebox
        except Exception as ex:
            print("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ tkinter:", ex)
            return

        def on_run():
            name = name_entry.get().strip()
            data_str = data_entry.get().strip()
            divisors_str = divisors_entry.get().strip()

            try:
                data = [float(x) for x in data_str.split(",") if x.strip()]
                divisors = [float(x) for x in divisors_str.split(",") if x.strip()]
            except ValueError:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
                return

            try:
                report = Report(name)
                report.process(data, divisors)
            except Exception as ex:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", str(ex))

        root = tk.Tk()
        root.title("–ó–≤—ñ—Ç")

        tk.Label(root, text="–Ü–º'—è:").grid(row=0, column=0, sticky="e")
        name_entry = tk.Entry(root)
        name_entry.grid(row=0, column=1)

        tk.Label(root, text="–î–∞–Ω—ñ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").grid(row=1, column=0, sticky="e")
        data_entry = tk.Entry(root)
        data_entry.grid(row=1, column=1)

        tk.Label(root, text="–î—ñ–ª—å–Ω–∏–∫–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É):").grid(row=2, column=0, sticky="e")
        divisors_entry = tk.Entry(root)
        divisors_entry.grid(row=2, column=1)

        run_btn = tk.Button(root, text="–ó–∞–ø—É—Å—Ç–∏—Ç–∏", command=on_run)
        run_btn.grid(row=3, column=0, columnspan=2, pady=10)

        root.mainloop()

##! –Ø–≤–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≤—Å—å–æ–≥–æ –∫–æ–¥—É –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –Ω–µ –±—É–¥–µ
# if name == "main":
    # main()